

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 vertexNormal;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelNormalMatrix;
varying vec3 normalizedVarying;
varying vec3 vertexPosVarying;

void main() {
    vec4 vertex4 = ModelViewProjectionMatrix * vec4(vertex, 1.0);
    vertexPosVarying = vec3(vertex4)/vertex4.w;
    normalizedVarying = vec3(ModelNormalMatrix*vec4(vertexNormal,0.0));
    gl_Position = vertex4;
}`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

varying vec3 normalizedVarying;
varying vec3 vertexPosVarying;
uniform vec3 lightDirection;

void main() {
   float Ka=1.0;
   float Kd=1.0;
   float Ks=1.0;
   float shininessVal = 80.0;
   vec3 ambientColor = vec3(0.05, 0.03, 0.4);
   vec3 diffuseColor = vec3(0.27, 0.72, 0.32);
   vec3 specularColor = vec3(0.0, 0.0, 0.0);
   vec3 N = normalize(normalizedVarying);

    // "- vertexPosVarying" потрібно для плавної анімації, тому я вирішив залишити, решту зауважень виправив
    vec3 L = normalize(lightDirection - vertexPosVarying);
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.5;
    vec3 R = reflect(-L, N);     
    vec3 V = normalize(-vertexPosVarying);
    float specAngle = max(dot(R, V), 0.0);
    specular = pow(specAngle, shininessVal);
    
    gl_FragColor = vec4(Ka * ambientColor +
                      Kd * lambertian * diffuseColor +
                      Ks * specular * specularColor, 1.0);

}`;